service: etigre-dura-procurement-back-end

frameworkVersion: '2'

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x

functions:
  getById:
    handler: src/functions/select/getBy.id
    runtime: nodejs14.x
    timeout: 20
    environment:
      aws_region: ${self:custom.region}
    events:
      - http:
          path: /{table}/{id}
          method: get
          cors:
            origin: '*'
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  #  changed to 'codition'
  getCollection:
    handler: src/functions/select/getBy.condition
    runtime: nodejs14.x
    timeout: 20
    environment:
      aws_region: ${self:custom.region}
    events:
      - http:
          path: /{table}
          method: get
          cors:
            origin: '*'
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  #  test
  deleteById:
    handler: src/functions/delete/deleteBy.deletePurchaseById
    runtime: nodejs14.x
    timeout: 20
    environment:
      aws_region: ${self:custom.region}
    events:
      - http:
          path: /delete_purchase/{id}
          method: delete
          cors:
            origin: '*'
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer teste
  #  now, 'collection' work as codition
  #  getByCondiction:
  #    handler: src/functions/select/getBy.condition
  #    runtime: nodejs14.x
  #    timeout: 20
  #    environment:
  #      aws_region: ${self:custom.region}
  #    events:
  #      - http:
  #          path: getByCondiction/{table}/
  #          method: get
  #          cors:
  #            origin: '*'
  #          authorizer:
  #            type: COGNITO_USER_POOLS
  #            authorizerId:
  #              Ref: ApiGatewayAuthorizer
  insert:
    handler: src/functions/insert/create.insert
    runtime: nodejs14.x
    timeout: 20
    environment:
      aws_region: ${self:custom.region}
    events:
      - http:
          path: /{table}
          method: post
          cors:
            origin: '*'
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  update:
    handler: src/functions/update/update.upsert
    runtime: nodejs14.x
    timeout: 20
    environment:
      aws_region: ${self:custom.region}
    events:
      - http:
          path: /{table}
          method: put
          cors:
            origin: '*'
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  getPurchasesFromStatus:
    handler: src/functions/select/getBy.purchaseFromStatus
    runtime: nodejs14.x
    timeout: 20
    environment:
      aws_region: ${self:custom.region}
    events:
      - http:
          path: /custom/purchase/
          method: get
          cors:
            origin: '*'
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  purchaseItemsFromPurchaseId:
    handler: src/functions/select/getBy.purchaseItemsFromPurchaseId
    runtime: nodejs14.x
    timeout: 20
    environment:
      aws_region: ${self:custom.region}
    events:
      - http:
          path: /custom/purchase_item_from_purchase/{id}
          method: get
          cors:
            origin: '*'
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
              getPurchaseFromStatus:
                handler: src/functions/select/getBy.purchaseFromStatus
                runtime: nodejs14.x
                timeout: 20
                environment:
                  aws_region: ${self:custom.region}
                events:
                  - http:
                      path: /custom/purchase/{id}
                      method: get
                      cors:
                        origin: '*'
                      authorizer:
                        type: COGNITO_USER_POOLS
                        authorizerId:
                          Ref: ApiGatewayAuthorizer
